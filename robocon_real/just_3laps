#超音波センサのピン設定
from signal import SIG_UNBLOCK
import RPi.GPIO as GPIO             #GPIO用のモジュールをインポート
import time                         #時間制御用のモジュールをインポート
import sys                          #sysモジュールをインポート

  #ポート番号の定義
Trig = 27                           #変数"Trig"に27を代入
Echo = 18                           #変数"Echo"に18を代入

sig_on = 0
sig_off = 0

#GPIOの設定
GPIO.setmode(GPIO.BCM)              #GPIOのモードを"GPIO.BCM"に設定
GPIO.setup(Trig, GPIO.OUT)          #GPIO27を出力モードに設定
GPIO.setup(Echo, GPIO.IN)           #GPIO18を入力モードに設定

#ステッピングモータのピン設定

#超音波センサに関するもろもろの設定
#HC-SR04で距離を測定する関数
def read_distance():

    global sig_on
    global sig_off

    GPIO.output(Trig, GPIO.HIGH)            #GPIO27の出力をHigh(3.3V)にする
    time.sleep(0.00001)                     #10μ秒間待つ
    GPIO.output(Trig, GPIO.LOW)             #GPIO27の出力をLow(0V)にする

    while GPIO.input(Echo) == GPIO.LOW:     #GPIO18がLowの時間
        sig_off = time.time()
    while GPIO.input(Echo) == GPIO.HIGH:    #GPIO18がHighの時間
        sig_on = time.time()


    duration = sig_off - sig_on             #GPIO18がHighしている時間を算術
    distance = duration * 34000 / 2         #距離を求める(cm)
    return distance

#ステッピングモータに関するもろもろの設定

#旋回回数
number_of_turns = 0

while True:
  try:
        cm = -read_distance()
        print(cm)                   #HC-SR04で距離を測定する
        if cm > 2 and cm < 400:                #距離が2～400cmの場合
            print("distance=", int(cm), "cm")  #距離をint型で表示
        else:
            print("over")
        
        if cm<15:
            if number_of_turns = 10:
                #旋回回数が10なら停止
                
            number_of_turns = number_of_turns + 1　　#距離が15cm未満になったら，旋回回数の値を＋１して右旋回
            print("number_of_turns=", int(number_of_turns), "number_of_turns")　#旋回回数をint型で表示
            
        if cm>15:
            #距離が15cmより大きくなったら直進
        
        time.sleep(0.01)                          #0.01秒間待つ（正確に0.01秒とは限らないらしい）

    except KeyboardInterrupt:       #Ctrl+Cキーが押された
        GPIO.cleanup()              #GPIOをクリーンアップ
        sys.exit()                  #プログラム終了
