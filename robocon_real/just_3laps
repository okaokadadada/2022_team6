from signal import SIG_UNBLOCK
import RPi.GPIO as GPIO             #GPIO用のモジュールをインポート
import time                         #時間制御用のモジュールをインポート
import sys                          #sysモジュールをインポート
GPIO.setmode(GPIO.BCM)              #GPIOのモードを"GPIO.BCM"に設定

#ポート番号の定義
　超音波センサ
Trig = 27                           #変数"Trig"に27を代入
Echo = 18                           #変数"Echo"に18を代入

sig_on = 0
sig_off = 0

  #ステッピングモータ
right_IN1 = 17
right_IN2 = 22
right_IN3 = 23
right_IN4 = 24

left_IN1 = 
left_IN2 = 
left_IN3 = 
left_IN4 = 

WAITTIME = 0.002

#GPIOの設定
　#超音波センサ
GPIO.setup(Trig, GPIO.OUT)          #GPIO27を出力モードに設定
GPIO.setup(Echo, GPIO.IN)           #GPIO18を入力モードに設定

　#ステッピングモータ
GPIO.setup( right_IN1, GPIO.OUT )  #右ステッピングモータを出力に設定
GPIO.setup( right_IN2, GPIO.OUT )
GPIO.setup( right_IN3, GPIO.OUT )
GPIO.setup( right_IN4, GPIO.OUT )

GPIO.setup( left_IN1, GPIO.OUT )　#左ステッピングモータを出力に設定
GPIO.setup( left_IN2, GPIO.OUT )
GPIO.setup( left_IN3, GPIO.OUT )
GPIO.setup( left_IN4, GPIO.OUT )

#HC-SR04で距離を測定する関数
def read_distance():

    global sig_on
    global sig_off

    GPIO.output(Trig, GPIO.HIGH)            #GPIO27の出力をHigh(3.3V)にする
    time.sleep(0.00001)                     #10μ秒間待つ
    GPIO.output(Trig, GPIO.LOW)             #GPIO27の出力をLow(0V)にする

    while GPIO.input(Echo) == GPIO.LOW:     #GPIO18がLowの時間
        sig_off = time.time()
    while GPIO.input(Echo) == GPIO.HIGH:    #GPIO18がHighの時間
        sig_on = time.time()


    duration = sig_off - sig_on             #GPIO18がHighしている時間を算術
    distance = duration * 34000 / 2         #距離を求める(cm)
    return distance

#ステッピングモータを制御する関数
def right_stop():　#右ステッピングモータを停止させる関数
  GPIO.output( right_IN1, GPIO.LOW )
  GPIO.output( right_IN2, GPIO.LOW )
  GPIO.output( right_IN3, GPIO.LOW )
  GPIO.output( right_IN4, GPIO.LOW )
  
def setStep( w1, w2, w3, w4 ):  #右ステッピングモータの回転方向を決定する関数
  GPIO.output( right_IN1, w1 )
  GPIO.output( right_IN2, w2 )
  GPIO.output( right_IN3, w3 )
  GPIO.output( right_IN4, w4 )
  time.sleep( WAITTIME )

def right_advance( angle ):　#右ステッピングモータを正回転させる関数
  for i in range(0,int(angle * 1.422222222)):
    setStep( 1, 0, 0, 0 )
    setStep( 0, 1, 0, 0 )
    setStep( 0, 0, 1, 0 )
    setStep( 0, 0, 0, 1 )
 
def left_stop():　#左ステッピングモータを停止させる関数
  GPIO.output( left_IN1, GPIO.LOW )
  GPIO.output( left_IN2, GPIO.LOW )
  GPIO.output( left_IN3, GPIO.LOW )
  GPIO.output( left_IN4, GPIO.LOW )

def setStep( w1, w2, w3, w4 ):  #左ステッピングモータの回転方向を決定する関数
  GPIO.output( left_IN1, w1 )
  GPIO.output( left_IN2, w2 )
  GPIO.output( left_IN3, w3 )
  GPIO.output( left_IN4, w4 )
  time.sleep( WAITTIME )

def left_advance( angle ):　#左ステッピングモータを正回転させる関数
  for i in range(0,int(angle * 1.422222222)):
    setStep( 1, 0, 0, 0 )
    setStep( 0, 1, 0, 0 )
    setStep( 0, 0, 1, 0 )
    setStep( 0, 0, 0, 1 )

#旋回回数
number_of_turns = 0

right_stop()
left_stop()

while True:
  try:
        cm = -read_distance()
        print(cm)                   #HC-SR04で距離を測定する
        if cm > 2 and cm < 400:                #距離が2～400cmの場合
            print("distance=", int(cm), "cm")  #距離をint型で表示
        else:
            print("over")
        
        if cm<15:  #距離が15cm未満になったら，旋回回数の値を＋１して右旋回
            if number_of_turns = 10:  　#旋回回数が10なら停止
              right_stop()
              left_stop()
              
            number_of_turns = number_of_turns + 1
            print("number_of_turns=", int(number_of_turns), "number_of_turns")　#旋回回数をint型で表示
            
            right_stop()
            left_advance( 3600 )
            
        if cm>15:  #距離が15cmより大きくなったら直進
            right_advance( 3600 )
            left_advance( 3600 )
        
        time.sleep(0.01)                          #0.01秒間待つ（正確に0.01秒とは限らないらしい）

    except KeyboardInterrupt:       #Ctrl+Cキーが押された
        GPIO.cleanup()              #GPIOをクリーンアップ
        sys.exit()                  #プログラム終了
